#!/bin/bash
#
# nodeservices <summary>
#
# chkconfig:   2345 80 20
# description: Starts and stops nodeservices for HyperCamp on this system
#

PROG="nodetodolist"
SUSER="root"
SGROUP="root"

### BEGIN INIT INFO
# Provides: 
# Required-Start: $network $named
# Required-Stop: $network $named
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: NodeJS based todolist
# Description: NodeJS based todolist
### END INIT INFO

#
# init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
    . /etc/rc.status
    rc_reset
fi

#
# Source function library.
#
if [ -f /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
fi

BILL_HOME=/opt/NodeJS-Todolist

PID_DIR="/var/run/nodetodolist"

exec="$BILL_HOME/bin/${PROG}.sh"
prog="${PROG}"
pidfile="$PID_DIR/${prog}.pid"
logfile="$LOG_DIR/${prog}.log"
lockfile=/var/lock/subsys/$prog

if [ ! -x "$exec" ]; then
    echo -e "The ${PROG} startup script does not exists or it is not executable, \ntried: $exec"
    exit 1
fi

start() {
    [ -x $exec ] || exit 5

    # Ensure that the PID_DIR exists (it is cleaned at OS startup time)
    if [ -n "$PID_DIR" ] && [ ! -e "$PID_DIR" ]; then
        mkdir -p "$PID_DIR" && chown ${SUSER}:${SGROUP} "$PID_DIR"
    fi
    if [ -n "$pidfile" ] && [ ! -e "$pidfile" ]; then
        touch "$pidfile" && chown ${SUSER}:${SGROUP} "$pidfile"
    fi
    if [ -n "$LOG_DIR" ] && [ ! -e "$LOG_DIR" ]; then
        mkdir -p "$LOG_DIR" && chown ${SUSER}:${SGROUP} "$LOG_DIR"
    fi
    if [ -n "$logfile" ] && [ ! -e "$logfile" ]; then
        touch "$logfile" && chown ${SUSER}:${SGROUP} "$logfile"
    fi

    cd $BILL_HOME
    echo -n $"Starting $prog: "
    # if not running, start it up here, usually something like "daemon $exec"
    daemon --user ${SUSER} --pidfile $pidfile $exec  -p $pidfile -d
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    # stop it here, often "killproc $prog"
    killproc -p $pidfile -d 86400 $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
